summary(nyt4Imp)
summary(nyt5Imp)
summary(nyt6Imp)
# ecdf and qq for Age
plot(ecdf(nyt2Age), do.points=FALSE, verticals=TRUE)
plot(ecdf(nyt3Age), do.points=FALSE, verticals=TRUE)
plot(ecdf(nyt4Age), do.points=FALSE, verticals=TRUE)
plot(ecdf(nyt5Age), do.points=FALSE, verticals=TRUE)
plot(ecdf(nyt6Age), do.points=FALSE, verticals=TRUE)
qqnorm(nyt2Age); qqline(nyt2Age)
qqnorm(nyt3Age); qqline(nyt3Age)
qqnorm(nyt4Age); qqline(nyt4Age)
qqnorm(nyt5Age); qqline(nyt5Age)
qqnorm(nyt6Age); qqline(nyt6Age)
# ecdf and qq for Clicks
plot(ecdf(nyt2Imp))
plot(ecdf(nyt3Imp))
plot(ecdf(nyt4Imp))
plot(ecdf(nyt5Imp))
plot(ecdf(nyt6Imp))
qqnorm(nyt2Imp); qqline(nyt2Imp)
qqnorm(nyt3Imp); qqline(nyt3Imp)
qqnorm(nyt4Imp); qqline(nyt4Imp)
qqnorm(nyt5Imp); qqline(nyt5Imp)
qqnorm(nyt6Imp); qqline(nyt6Imp)
# For Age
# Given that the mean age for all 5 nytAge datasets hover around 42 years old
# Using 95% confidence interval
# Null Hypothesis: The Average Age of NYT datasets is 42 years old
t.test(nyt2Age);
t.test(nyt3Age);
t.test(nyt4Age);
t.test(nyt5Age);
t.test(nyt6Age);
# For Impression
# Let us test if Age and Impressions are dependent on one another. (i.e that if they are dependent, age affects the impressions that one gets)
chisq.test(table(nyt2$Age, nyt2Imp), correct = FALSE)
chisq.test(table(nyt3$Age, nyt3Imp), correct = FALSE)
chisq.test(table(nyt4$Age, nyt4Imp), correct = FALSE)
chisq.test(table(nyt5$Age, nyt5Imp), correct = FALSE)
chisq.test(table(nyt6$Age, nyt6Imp), correct = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
pricing <- manhattanDS2$`SALE
PRICE`
knitr::opts_chunk$set(echo = TRUE)
q()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
manhattanDS <- read_excel("rollingsales_manhattan.xls")
manhattanDS2 <- tail(manhattanDS, -3)
colnames(manhattanDS2) <- head(manhattanDS2, 1)
manhattanDS2 <- tail(manhattanDS2, -1)
pricing <- manhattanDS2$`SALE
PRICE`
pricing <- as.numeric(pricing)
pricing <- pricing[pricing > 100]
hist(pricing, breaks = 1000)
hist(pricing, xlim = c(0, 1.4e+07), breaks = 1000)
boxplot(pricing, ylim = c(0, 1.4e+07))
boxplot(pricing)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
augmented_df <- manhattanDS2 %>% select(manhattanDS2$BLOCK, manhattanDS2$`GROSS SQUARE FEET`, manhattanDS2$`ZIP CODE`, manhattanDS2$`SALE PRICE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
augmented_df <- manhattanDS2 %>% select(manhattanDS2$`BLOCK`, manhattanDS2$`GROSS SQUARE FEET`, manhattanDS2$`ZIP CODE`, manhattanDS2$`SALE PRICE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
augmented_df <- manhattanDS2 %>% select(`BLOCK`, `GROSS SQUARE FEET`, `ZIP CODE`, `SALE PRICE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
df <- manhattanDS2[c(1, 2)]
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
df <- manhattanDS2[c(1, 2)]
df
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE PRICE` <- as.numeric(df$`SALE PRICE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE PRICE` <- as.numeric(df$`SALE PRICE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
as.numeric(df$`SALE PRICE`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE PRICE`
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALEPRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE PRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
as.numeric(df$`SALE
PRICE`)
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE` <- as.numeric(df$`SALE
PRICE`)
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE` <- as.numeric(df$`SALE
PRICE`)
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
normalization_funct <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$`SALE
PRICE` <- as.numeric(df$`SALE
PRICE`)
df$`SALE
PRICE`
df$BLOCK <- as.numeric(df$BLOCK)
df$`ZIP CODE` <- as.numeric(df$`ZIP CODE`)
df$`YEAR BUILT` <- as.numeric(df$`YEAR BUILT`)
df$`SALE DATE` <- as.numeric(df$`SALE DATE`)
norm <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- norm(as.numeric(df$BLOCK))
df$`ZIP CODE` <- norm(as.numeric(df$`ZIP CODE`))
df$`YEAR BUILT` <- norm(as.numeric(df$`YEAR BUILT`))
df$`SALE DATE` <- norm(as.numeric(df$`SALE DATE`))
df$`SALE
PRICE` <- norm(as.numeric(df$`SALE
PRICE`))
norm <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- norm(as.numeric(df$BLOCK))
df$`ZIP CODE` <- norm(as.numeric(df$`ZIP CODE`))
df$`YEAR BUILT` <- norm(as.numeric(df$`YEAR BUILT`))
df$`SALE DATE` <- norm(as.numeric(df$`SALE DATE`))
df$`SALE
PRICE` <- norm(as.numeric(df$`SALE
PRICE`))
View(df)
# Let us test the correlation between zip code and sale price using a p-val correlation test
cor.test(df$`ZIP CODE`, df$`SALE
PRICE`)
# Let us test the correlation between zip code and sale price using a p-val correlation test
cor.test(df$`ZIP CODE`, df$`SALE
PRICE`)
set.seed(123)
fviz_nbclust(df, kmeans, method="wss")
library(factoextra)
install.packages(factoextra)
library(factoextra)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)
install(map)
install.packages(map)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)
install.packages(tidyverse)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)
install.packages("tidyverse")
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)
install.packages("tidyverse")
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
for (k in k.values) {
}
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
for (k in k.values) {
}
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
for (k in k.values) {
}
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i = 0
for (k in k.values) {
i += 1
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
i <- i + 1
}
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
i <- i + 1
}
i
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:20
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals, xlab="K Clusters", ylab="WSS")
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals, xlab="K Clusters", ylab="WSS")
set.seed(123)
wss <- function(k) {
kmeans(df, k)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals, xlab="K Clusters", ylab="WSS")
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals, xlab="K Clusters", ylab="WSS")
model <- kmeans(df, 5, nstart = 10)
model$centers
model <- kmeans(df, 5, nstart = 10)
plot(df[c(2, 4)], col=model$cluster)
model <- kmeans(df, 5, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.8, 1.5))
model <- kmeans(df, 5, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.8, 1.0))
model <- kmeans(df, 5, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
plot(df[c(2, 4)], col=df.class, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
plot(df[c(2, 4)], col=df$`ZIP CODE`, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
plot(df[c(2, 4)], col=df$`ZIP CODE`)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(4, 5)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(4, 5)], col=model$cluster)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
model%cluster
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
manhattanDS <- read_excel("rollingsales_manhattan.xls")
manhattanDS2 <- tail(manhattanDS, -3)
colnames(manhattanDS2) <- head(manhattanDS2, 1)
manhattanDS2 <- tail(manhattanDS2, -1)
pricing <- manhattanDS2$`SALE
PRICE`
pricing <- as.numeric(pricing)
pricing <- pricing[pricing > 100]
hist(pricing, breaks = 1000)
hist(pricing, xlim = c(0, 1.4e+07), breaks = 1000)
boxplot(pricing, ylim = c(0, 1.4e+07))
boxplot(pricing)
cat("Highest Housing Sale:", max(pricing), "\n")
cat("Lowest Housing Sale:", min(pricing))
norm <- function(x) { return ((x-min(x))/(max(x)-min(x))) }
# (block, lot, year built, sale price, sale data)
df <- manhattanDS2[c(5, 11, 17, 20, 21)]
df$BLOCK <- norm(as.numeric(df$BLOCK))
df$`ZIP CODE` <- norm(as.numeric(df$`ZIP CODE`))
df$`YEAR BUILT` <- norm(as.numeric(df$`YEAR BUILT`))
df$`SALE DATE` <- norm(as.numeric(df$`SALE DATE`))
df$`SALE
PRICE` <- norm(as.numeric(df$`SALE
PRICE`))
# Let us test the correlation between zip code and sale price using a p-val correlation test
cor.test(df$`ZIP CODE`, df$`SALE
PRICE`)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 1:15
save_vals = rep(NA, length(k.values))
i <- 0
for (k in k.values) {
save_vals[i] <- wss(k)
i <- i + 1
}
plot(k.values, save_vals, xlab="K Clusters", ylab="WSS")
model <- kmeans(df, 6, nstart = 10)
plot(df[c(2, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
model%cluster
model$cluster
model$centers
model$size
model$centers
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=df$`ZIP CODE`)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
df
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
plot(df[c(3, 4)], col=model$cluster)
df
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
plot(df[c(3, 4)], col=model$cluster, xlim=range(0.95, 1.0))
df
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
plot(df[c(3, 4)], col=model$cluster, xlim=range(0.95, 1.0))
# Significance Test for Year Built vs Sale Price
cor.test(df$`YEAR BUILT`, df$`SALE
PRICE`)
# Significance Test for Sale Date vs Sale Price
cor.test(df$`SALE DATE`, df$`SALE
PRICE`)
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$centers)
plot(df[c(3, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
plot(df[c(3, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model <- kmeans(df, 6, nstart = 10)
plot(df[c(5, 4)], col=model$cluster)
plot(df[c(3, 4)], col=model$cluster, xlim=range(0.95, 1.0))
model$size
model$centers
setwd("~/Documents/RPI Co-Term/Spring 2021/DataAnalytics/Project")
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("abresler/nbastatR")
